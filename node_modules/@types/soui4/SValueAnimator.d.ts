import exp from "constants";
import { POINT, RECT, SIZE } from "soui4/Basic";
import { IValueAnimator } from "soui4/IValueAnimator";
import { COLORREF, int } from "soui4/Typedef";

export class SValueAnimator{
    /**
     * callback this object
     */
    cbHandler:object;

    /**
     * userData
     */
    jsUserData:object;

    /**
     * callback function for onAnimationStart
     */
    onAnimationStart:(animator:IValueAnimator)=>void;

    /**
     * callback function for onAnimationEnd
     */
    onAnimationEnd:(animator:IValueAnimator)=>void;

    /**
     * callback function for onAnimationRepeat
     */
    onAnimationRepeat:(animator:IValueAnimator)=>void;

    /**
     * callback function for onAnimationUpdate
     */
    onAnimationUpdate:(animator:IValueAnimator)=>void;

    /**
     * load animator for resouce id
     * @param resId resource id
     */
    LoadAniamtor(resId:string):boolean;

    /**
     * copy animator from exist IValueAnimator
     * @param ani 
     */
    CopyFrom(ani:IValueAnimator):boolean;

    /**
     * get IValueAnimator object
     */
    GetIValueAnimator():IValueAnimator;

    /**
     * get animator type
     */
    GetAniType():int;

    /**
     * get animator fraction
     */
    GetFraction():number;

    /**
     * start the animator
     * @param aniMgr animator manager, can be IWindow.GetIRoot().GetContainer()
     */
    Start(aniMgr:number):boolean;

    /**
     * set range value
     * @param from 
     */
    SetRange(from:number|POINT|SIZE|RECT,to:number|POINT|SIZE|RECT):boolean;
}

export class SAnimatorGroup{
    constructor();
        /**
     * callback this object
     */
        cbHandler:object;

        /**
         * userData
         */
        jsUserData:object;
    
    AddAnimator(ani:IValueAnimator):boolean;
    RemoveAnimator(ani:IValueAnimator):boolean;

    onAniGroupEnd:(_this:SAnimatorGroup)=>void;
}