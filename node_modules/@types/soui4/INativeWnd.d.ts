import { POINT, RECT } from "soui4/Basic";
import { IObjRef } from "soui4/IObjRef";
import { HWND } from "soui4/Typedef";

export class INativeWnd extends IObjRef{
    
    /**
     * @brief 创建一个Native窗口
     * @param lpWindowName 窗口名
     * @param dwStyle 窗口style
     * @param dwExStyle 窗口exStyle
     * @param x 窗口显示位置X
     * @param y 窗口显示位置Y
     * @param nWidth 窗口显示宽度
     * @param nHeight 窗口显示高度
     * @param hWndParent 父窗口
     * @param nID 窗口ID
     * @param lpParam 附加参数
     * @return 窗口HWND
    */
    CreateNative(lpWindowName:string , dwStyle:number, dwExStyle:number, x:number, y:number, nWidth:number, nHeight:number, numberParent:number, nID :number, lpParam:number):number;

    /**
     * @brief 获取窗口HWND
     * @return 窗口HWND
    */
    GetHwnd():number;

    /**
     * @brief 用SNativeWnd对象子类化一个HWND
     * @param hWnd 目标HWND
     * @return TRUE-成功
    */
    SubclassWindow(hwnd:number):boolean;

    /**
     * @brief 反子类化
     * @param bForce 为真是，如果当前窗口的wndproc不是SNativeWnd对象的窗口过程也执行反子类化
     * @return 执行反子类化的窗口HWND
    */
    UnsubclassWindow(bForce:boolean):number;

    /**
     * @brief 获取当前的窗口消息对象
     * @return 窗口消息对象指针
    */
    GetCurrentMessage() :number;

    /**
     * @brief 获取窗口ID
    */
    GetDlgCtrlID() :number;


    /**
     * @brief 获取窗口Style
    */
    GetStyle() :number;

    /**
     * @brief 获取窗口exStyle
    */
    GetExStyle() :number;

    /**
     * @brief 获取窗口关联数据
     * @param nIndex 数据索引
     * @return 数据值
    */
    GetWindowLongPtr(nIndex:number) :number;
    /**
     * @brief 设置窗口关联数据
     * @param nIndex 数据索引
     * @param dwNewLong 数据值
     * @return 原数据值
    */
    SetWindowLongPtr(nIndex:number, dwNewLong:number):number;

    /**
     * @brief 获取父窗口
     * @return 父窗口HWND
    */
    GetParent():HWND;

    /**
     * @brief 设置父窗口
     * @param hWndNewParent 新父窗口HWND
     * @return 原父窗口HWND
    */
    SetParent(numberNewParent:HWND):HWND;

    /**
     * @brief 获取窗口的enable状态
     * @return TRUE-enable
    */
    IsWindowEnabled() :boolean;

    /**
     * @brief 修改窗口style
     * @param dwRemove 待移除标志位
     * @param dwAdd 待增加标志位
     * @param nFlags Window positioning flags
     * @return TRUE-SUCCEED
    */
    ModifyStyle(dwRemove:number, dwAdd:number, nFlags:number ):boolean;

    /**
     * @brief 修改窗口exStyle
     * @param dwRemove 待移除标志位
     * @param dwAdd 待增加标志位
     * @param nFlags Window positioning flags
     * @return TRUE-SUCCEED
    */
    ModifyStyleEx(dwRemove:number, dwAdd:number, nFlags:number ):boolean;

    /**
     * @brief 设置窗口的Pos
     * @param hWndInsertAfter zorder位置
     * @param x 
     * @param y 
     * @param cx 
     * @param cy 
     * @param nFlags 标志位
     * @return TRUE-SUCCEED
    */
    SetWindowPos(numberInsertAfter:number, x:number, y:number, cx:number, cy:number, nFlags:number):boolean;

    /**
     * @brief 窗口居中
     * @param hWndCenter 相对居中窗口
     * @return TRUE-SUCCEED
    */
    CenterWindow(numberCenter:HWND):boolean;

    /**
     * @brief 销毁窗口
     * @return TRUE-SUCCEED
    */
    DestroyWindow():boolean;

    /**
     * @brief 检查是否为有效HWND
     * @return 
    */
    IsWindow():boolean;

    /**
     * @brief 刷新窗口
     * @param bErase 清除窗口内容
     * @return TRUE-SUCCEED
    */
    Invalidate(bErase:boolean):boolean;

    /**
     * @brief 刷新窗口指定区域
     * @param lpRect 待刷新区域
     * @param bErase 清除窗口内容
     * @return TRUE-SUCCEED
    */
    InvalidateRect(lpRect:RECT, bErase:boolean):boolean;

    /**
     * @brief 获取窗口位置
     * @param[out] lpRect 窗口位置
     * @return TRUE-SUCCEED
    */
    GetWindowRect(lpRect:RECT) :boolean;

    /**
     * @brief 获取窗口客户区位置
     * @param[out] lpRect 客户区位置
     * @return TRUE-SUCCEED
    */
    GetClientRect(lpRect:RECT) :boolean;

    /**
     * @brief 将相对窗口的坐标转换为屏幕坐标
     * @param[in][out] lpPoint 待转换坐标
     * @return TRUE-SUCCEED
    */
    ClientToScreen(lpPoint:POINT ) :boolean;

    /**
     * @brief 将相对窗口的矩形坐标转换为屏幕坐标
     * @param[in][out] lpRect 待转换坐标
     * @return TRUE-SUCCEED
    */
    ClientToScreen2(lpRect:RECT) :boolean;

    /**
     * @brief 将屏幕坐标转换为窗口坐标
     * @param[in][out] lpPoint 待转换坐标
     * @return TRUE-SUCCEED
    */
    ScreenToClient(lpPoint:POINT) :boolean;

    /**
     * @brief 将屏幕矩形坐标转换为窗口坐标
     * @param[in][out] lpRect 待转换坐标
     * @return TRUE-SUCCEED
    */
    ScreenToClient2(lpRect:RECT) :boolean;

    /**
     * @brief 将一组窗口坐标转换为相对于另一个窗口的坐标
     * @param hWndTo 目标窗口
     * @param[in][out] lpPoint 坐标数组
     * @param nCount 数组长度
     * @return TRUE-SUCCEED
    */
    MapWindowPonumbers(hwndTo:HWND, lpPoint:POINT, nCount:number) :number;

    /**
     * @brief 将一个窗口矩形映射为相对于另一个窗口的矩形
     * @param hWndTo 目标窗口
     * @param[in][out] lpRect 待转换矩形
     * @return TRUE-SUCCEED
    */
    MapWindowRect(hwndTo:HWND,  lpRect:RECT) :number;

    /**
     * @brief 获取当前有鼠标捕获的HWND
     * @return 鼠标捕获的HWND
    */
    GetCapture():HWND;

    /**
     * @brief 将当前窗口设置为捕获鼠标输入
     * @return 前一个HWND
    */
    SetCapture():HWND;

    /**
     * @brief 退出鼠标捕获
     * @return 
    */
    ReleaseCapture():boolean;

    /**
     * @brief 让窗口成为接收键盘输入的焦点窗口
     * @return 前一个焦点窗口
    */
    SetFocus():HWND;

    /**
     * @brief 同步执行一个消息到窗口处理过程
     * @param message msg id
     * @param wParam 
     * @param lParam 
     * @return 消息处理返回值
    */
    SendMessage(message:number, wParam:number,lParam:number):number;

    /**
     * @brief 异步执行一个消息到窗口处理过程
     * @param message msg id
     * @param wParam
     * @param lParam
     * @return 消息处理返回值
    */
    PostMessage(message:number, wParam:number,lParam:number):number;

    SendNotifyMessage(message:number, wParam:number,lParam:number):number;

    /**
     * @brief 设置窗口标题
     * @param lpszString 标题文本
     * @return 
    */
    SetWindowText(lpszString:string):boolean;

    /**
     * @brief 获取窗口标题文本
     * @param lpszStringBuf 缓冲区
     * @param nMaxCount 缓冲区长度
     * @return lpszStringBuf为null时返回数据长度
    */
    GetWindowText(lpszStringBuf:string , nMaxCount:number) :number;

    /**
     * @brief 查询是否为最小化状态
     * @return TRUE-最小化
    */
    IsIconic() :boolean;

    /**
     * @brief 查询是否为最大化状态
     * @return TRUE-最大化
    */
    IsZoomed() :boolean;

    /**
     * @brief 查询窗口是否可见
     * @return TRUE-可见
    */
    IsWindowVisible() :boolean;

    /**
     * @brief 移动窗口位置
     * @param x 
     * @param y 
     * @param nWidth 
     * @param nHeight 
     * @param bRepaint 刷新窗口标志
     * @return 
    */
    MoveWindow(x:number, y:number,  nWidth:number, nHeight:number , bRepaint:boolean):boolean;

    /**
     * @brief 移动窗口位置
     * @param lpRect 目标位置
     * @param bRepaint 刷新标志
     * @return 
    */
    MoveWindow2(lpRect:RECT, bRepaint:boolean):boolean;

    /**
     * @brief 显示窗口
     * @param nCmdShow 显示标志 
     * @return 
    */
    ShowWindow(nCmdShow:number):boolean;




 









 
 
 
 



 


 


 
 
 
 
 
 











 

 
 
 

 }