import { INativeWnd } from "soui4/INativeWnd";
import { INcPainter } from "soui4/INcPainter";
import { IWindow } from "soui4/IWindow";
import { IXmlNode } from "soui4/IXml";
import { DWORD, HWND, int } from "soui4/Typedef";

export class IHostWnd extends INativeWnd{
    /**
     * 创建一个窗口
     * @param hWndParent 父窗口
     * @param dwStyle style
     * @param dwExStyle extend style
     * @param x x pos
     * @param y y pos
     * @param nWidth width
     * @param nHeight height
     */
    CreateEx(hWndParent:HWND, dwStyle:number, dwExStyle:number, x:number, y:int, nWidth:number, nHeight:number):HWND;

    /**
     * 创建一个窗口
     * @param hWndParent 父窗口
     * @param x x pos
     * @param y ypos
     * @param nWidth width 
     * @param nHeight height
     */
	Create(hWndParent:HWND, x:int,y:int, nWidth:int, nHeight:int):HWND;

    /**
     * 从xml初始化布局，支持重入
     * @param pNode xml元素
     */
    InitFromXml(pNode:IXmlNode):boolean;

    /**
     * 设置布局资源ID
     * @param pszLayoutId 布局资源ID
     */
    SetLayoutId(pszLayoutId:string):void;

    /**
     * 获取root IWindow
     */
    GetIRoot():IWindow;

    /**
     * 宿主支持半透明标志
     */
	IsTranslucent():boolean;

    /**
     * 获取IHostPresenter对象
     */
	GetPresenter() :IHostPresenter;

    /**
     * 设置IHostPresenter对象
     * @param pPresenter IHostPresenter对象
     */
	SetPresenter(pPresenter:IHostPresenter):void;

    /**
     * 获取IMsgLoop
     */
	GetMsgLoop():IMessageLoop;

    /**
     * @brief 根据ID查找子窗口
     * @param nId int--子窗口ID
     * @return IWindow*--匹配窗口
     * @remark 采用广度优先算法搜索匹配子窗口
     */
    FindIChildByID(nId:int):IWindow;

    /**
     * @brief 根据Name查找子窗口
     * @param pszName LPCWSTR--子窗口Name
     * @return IWindow*--匹配窗口
     * @remark 采用广度优先算法搜索匹配子窗口
     */
    FindIChildByName(pszName:string):IWindow;

    /**
     * 获取ncpainer对象
     */
    GetNcPainter():INcPainter;

    /**
     * 让窗口支持dragdrop
     */
    EnableDragDrop():void;

    /**
     * 显示或者隐藏hostwnd,支持hostwnd配置的动画显示
     * @param uShowCmd 
     * @param bWaitAniDone 
     */
    ShowHostWnd(uShowCmd:number,bWaitAniDone:boolean):void;

    /**
     * @brief 是否启用布局中定义的私有UIDef对象
     * @param BOOL bEnable TRUE-启动，FALSE-关闭
     * @return void
	 * @remark 当程序中需要重新从私有UIDef中获取数据时启动，启用完后关闭
     */
	EnablePrivateUiDef(bEnable:boolean) :void;

}

export class IHostDialog extends IHostWnd{
    /**
     * 弹出一个模态对话框
     * @param hParent 
     */
    DoModal(hParent:HWND /*=NULL*/):number;

    /**
     * 结束当前模式对话框，在事件回调里使用
     * @param nResult DoModal的返回值
     */
    EndDialog(nResult:number):void;
}