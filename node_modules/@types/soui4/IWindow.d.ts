import { CRect, POINT, RECT, SIZE } from "soui4/Basic";
import { IEvtArgs,IEvtSlot } from "soui4/IEvt";
import { IObject } from "soui4/IObject";
import { IAnimation } from "soui4/IAnimation";
import { COLORREF, HWND, ISwndContainer, SWND } from "soui4/Typedef";
import { IMatrix } from "soui4/IMatrix";

export class IWindow extends IObject{
    /**
     * set tooltip
     * @param str tooltip content
     */
    SetToolTipText(str:string):void;

    /**
     * get check flag
     */
    IsChecked():boolean;

    /**
     * set check flag
     * @param flag 
     */
    SetCheck(flag:boolean):void;

    /**
     * get disable flag
     */
    IsDisabled():boolean;

    /**
     * set disable flag
     * @param flag true-enable, false-disable
     */
    EnableWindow(flag:boolean):void;

    /**
     * get visible flag
     * @param checkParent check parent visible flag
     */
    IsVisible(checkParent:boolean):boolean;

    /**
     * set visible flag
     * @param visible true-visible
     * @param update update window flag
     */
    SetVisible(visible:boolean,update:boolean):void;

    /**
     * get user data
     */
    GetUserData():number;

    /**
     * set user data
     * @param uData user data
     */
    SetUserData(uData:number):void;

    /**
     * do colorize by cr
     * @param cr theme cr
     */
    DoColorize(cr:COLORREF):void;

    /**
     * dispatch a message for all children
     * @param msg message id
     * @param wp wparam
     * @param lp lparam
     */
    SDispatchMessage(msg:number,wp:number,lp:number):void;

    /**
     * get focusable flag
     */
    IsFocusable():boolean;

    /**
     * get focus state
     */
    IsFocused():boolean;

    /**
     * set focus
     */
    SetFocus():void;

    /**
     * kill focus
     */
    KillFocus():void;

    /**
     * invalidate client rect
     */
    Invalidate():void;

    /**
     * invalidate window by rc
     * @param rc the invalid rc
     */
    InvalidateRect(rc:RECT):void;

    /**
     * lock update
     */
    LockUpdate():void;

    /**
     * unlock update
     */
    UnlockUpdate():void;

    /**
     * get update lock state
     */
    IsUpdateLocked():boolean;

    /**
     * update window right now
     * @param bForce true-update, false-update only if invalid called.
     */
    Update(bForse:boolean):void;

    /**
     * move window to rect
     * @param rc rect
     */
    Move(rc:RECT):void;

    /**
     * move window to pos
     * @param x 
     * @param y 
     * @param cx 
     * @param cy 
     */
    Move2(x:number,y:number,cx:number,cy:number):void;

    /**
     * get window rect
     */
    GetWindowRect():CRect;

    /**
     * get client rect
     */
    GetClientRect():CRect;

    /**
     * test whether a point is in the window
     * @param pt the tested point
     * @param client true - only for client rect
     */
    IsContainPoint(pt:POINT,client:boolean):boolean;

    /**
     * get swnd from a point
     * @param pt point
     * @param includeMsgTransparent true for test msg transparent window
     */
    SwndFromPoint(pt:POINT,includeMsgTransparent:boolean):number;

    /**
     * start a timer
     * @param id timer id
     * @param elapse timer elapse 
     */
    SetTimer(id:number,elapse:number):boolean;

    /**
     * kill timer by id
     * @param id 
     */
    KillTimer(id:number):void;

    /**
     * get capture swnd
     */
    GetCapture():SWND;

    /**
     * set this window to do mouse capture
     * @returns the previous capture window
     */
    SetCapture():SWND;

    /**
     * release mouse capture
     */
    ReleaseCapture():boolean;

    /**
     * set an animation
     * @param ani animation
     */
    SetAnimation(ani:IAnimation):void;

    /**
     * start an animation
     * @param ani animation
     */
    StartAnimation(ani:IAnimation):void;

    /**
     * get animation object of this window
     */
    GetAnimation():IAnimation;

    /**
     * clear animation
     */
    ClearAnimation():void;

    /**
     * set alpha
     * @param alpha [0,255]
     */
    SetAlpha(alpha:number):void;

    /**
     * get alpha
     */
    GetAlpha():number;

    /**
     * set a matrix to this window
     * @param mtx 
     */
    SetMatrix(mtx:IMatrix):void;

    /**
     * get matrix of this window
     * @param mtx 
     */
    GetMatrix(mtx:IMatrix):void;

    /**
     * get current scale factor. base is 100
     */
    GetScale():number;

    /**
     * request to do relayout
     */
    RequestRelayout():void;

    /**
     * update layout by this
     */
    UpdateLayout():void;

    /**
     * update layout of children
     */
    UpdateChildrenPosition():void;

    /**
     * get layout dirty flag
     */
    IsLayoutDirty():boolean;

    /**
     * get root window
     */
    GetIRoot():IWindow;

    /**
     * get parent window
     */
    GetIParent():IWindow;

    /**
     * get window
     * @param flag 
     */
    GetIWindow(flag:number):IWindow;

    /**
     * get child
     * @param idx child index
     * @remark 0-this, 1+ return (idx-1) child
     */
    GetIChild(idx:number):IWindow;

    /**
     * get children count
     */
    GetChildrenCount():number;

    /**
     * test whether a IWindow is a decendant or not.
     * @param test the tested IWindow
     */
    IsDecendant(test:IWindow):boolean;

    /**
     * set owner
     * @param owner
     * @remark msg will tranfer to its owner firstly
     */
    SetIOwner(owner:IWindow):void;

    /**
     * get owner
     */
    GetIOwner():IWindow;

    /**
     * bring the window to be the topmost sibling
     */
    BringWindowToTop():void;

    /**
     * move the window to be next to the specified "after" window
     * @param after 
     */
    AdjustIZOrder(after:IWindow):void;

    /**
     * insert a new child to this with zorder after "after"
     * @param newChild 
     * @param after 
     */
    InsertIChild(newChild:IWindow,after:IWindow):void;

    /**
     * remove a child
     * @param child 
     */
    RemoveIChild(child:IWindow):void;

    /**
     * create children from xml string
     * @param xml 
     */
    CreateChildrenFromXml(xml:string):boolean;

    /**
     * create children from resid
     * @param resId type:name
     */
    CreateChildrenFromResId(resId:string):boolean;

    /**
     * find child by id
     * @param id 
     */
    FindIChildByID(id:number):IWindow;

    /**
     * find child by name
     * @param name 
     */
    FindIChildByName(name:string):IWindow;

    /**
     * destroy a child
     * @param child 
     */
    DestroyIChild(child:IWindow):void;

    /**
     * destroy all children
     */
    DestroyAllChildren():void;

    /**
     * destroy this window
     */
    Destroy():void;

    /**
     * get background color
     */
    GetBkgndColor():COLORREF;

    /**
     * set window text
     * @param text 
     */
    SetWindowText(text:string):void;

    /**
     * get window text
     * @param bRaw true-get raw text without translator
     */
    GetWindowText(bRaw:boolean):string;

    /**
     * set event mute state
     * @param flag true-mute
     */
    SetEventMute(flag:boolean):void;

    /**
     * subscribe an event
     * @param evtId event id
     * @param slot event slot
     */
    SubscribeEvent(evtId:number,slot:IEvtSlot):boolean;

    /**
     * unsubscribe an event
     * @param evtId event id
     * @param slot event slot
     */
    UnsubscribeEvent(evtId:number,slot:IEvtSlot):boolean;

    /**
     * fire a new event
     * @param evt event
     */
    FireEvent(evt:IEvtArgs):void;

    /**
     * fire a command event
     */
    FireCommand():boolean;

    /**
     * fire context menu event
     * @param pt 
     */
    FireContextMenu(pt:POINT):boolean;

    /**
     * get hostwnd HWND
     */
    GetHostHwnd():HWND;

    /**
     * get container object
     */
    GetContainer():ISwndContainer;

    /**
     * get desired size 
     * @param wid parent width
     * @param hei parent height
     */
    GetDesiredSize(wid:number,hei:number):SIZE;

    /**
     * get rect for layout children
     */
    GetChildrenLayoutRect():CRect;
}

/**
 * cast an object to IWindow
 * @param obj 
 */
export function toIWindow(obj:IObject):IWindow;