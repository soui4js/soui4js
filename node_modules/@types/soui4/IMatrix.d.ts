import { float } from "soui4/Typedef";

export class IMatrix{
        /**
         * @brief 获取矩阵数据
         * @return float[9] --矩阵数据
         */
        Data():ArrayBuffer;

        /**
         * @brief 清空矩阵
         * @return
         */
        reset():void;
    
        /**
         * @brief 将矩阵设定为单位矩阵
         * @return
         */
        setIdentity():void;
    
        /**
         * @brief 判断矩阵是否为单位矩阵
         * @return TRUE--矩阵是单位矩阵
         */
        isIdentity():boolean;
    
        /**
         * @brief Set the matrix to translate by (dx, dy).
         * @param dx int
         * @param dy int
         * @return
         */
        setTranslate(dx:float, dy:float):void;
    
        /**
         * @brief Set the matrix to scale by sx and sy.
         * @param sx int
         * @param sy int
         * @return
         */
        setScale(sx:float, sy:float):void;
   
        /**
         * @brief Set the matrix to scale by sx and sy, with a pivot point at (0, 0).
            The pivot point is the coordinate that should remain unchanged by the
            specified transformation.
         * @param sx int
         * @param sy int
         * @param px int
         * @param py int
         * @return
        */
        setScale2(sx:float, sy:float, px:float, py:float) :void;
    
        /**
         * @brief Set the matrix to rotate by the specified number of degrees
         * @param degrees float--rotate degree
         * @return
         */
        setRotate(degrees:float ):void;
    
        /**
         * @brief Set the matrix to rotate by the specified number of degrees, with a
        pivot point at (px, py). The pivot point is the coordinate that should
        remain unchanged by the specified transformation.
         * @param degrees
         * @param px
         * @param py
         * @return
        */
        setRotate2(degrees:float , px:float , py:float):void;
    
        /**
         * @brief Set the matrix to skew by kx and ky.
         * @param kx int
         * @param ky int
         * @return
         */
        setSkew(kx: float , ky:float ) :void;
    
        /**
         * @brief Set the matrix to skew by kx and ky, with a pivot point at (px, py).
        The pivot point is the coordinate that should remain unchanged by the
        specified transformation.
         * @param kx
         * @param ky
         * @param px
         * @param py
        */
        setSkew2(kx:float, ky:float , px:float , py:float ):void;
}