import { IObjRef } from "soui4/IObjRef";
import { IStringA } from "soui4/IString";
import { int } from "soui4/Typedef";

export class IHttpClient extends IObjRef
{
    /**
     * download file from the url
     * @param lpUrl remote file url
     * @param lpFilePath local file path name
     */
	DownloadFile(lpUrl:string, lpFilePath:string) :boolean;

    /**
     * return error code
     */
	GetErrorCode():HttpError;

    /**
     * do a http request
     * @param result result buffer. using IStringA
     * @param lpUrl url
     * @param type type
     * @param lpPostData post body string
     * @param lpHeader header string
     */
	Request(result:IStringA,lpUrl:string, type:RequestType, lpPostData:string, lpHeader:string):boolean;

    /**
     * get http code
     */
    GetHttpCode():number;
}

export class HttpRequest extends IHttpClient{
    /**
     * new a http request
     * @param url remote url
     * @param method method, can be "post" or "get"
     */
    constructor(url:string, method:string);

    /**
     * set header pair
     * @param pszKey header key
     * @param pszValue header value
     */
    SetHeader(pszKey:string ,pszValue:string):void;

    /**
     * set timeout in ms
     * @param dwConnectTime timeout for connection
     * @param dwSendTime timeout for send
     * @param dwRecvTime timeout for recv
     */
    SetTimeOut(dwConnectTime:int,  dwSendTime:int, dwRecvTime:int) :void;		

    /**
     * set context
     * @param opaque 
     */
    SetOpaque(opaque:int):void;

    /**
     * download to local file
     * @param pszFileName local failename
     */
    DownloadFile(pszFileName:string):boolean;

    /**
     * run the task
     */
    Execute():boolean;

    /**
     * cancel the current task
     */
    Cancel():void;

    /**
     * callback this object
     */
    cbHandler:object;

    /**
     * onResp callback
     */
    onResp:(opaque:number,respCode:number,resq:string)=>void;

    /**
     * onError callback
     */
    onError:(opaque:number,errCode:number)=>void;

    /**
     * onProg callback
     */
    onProg:(opaque:number,state:number,sizeAll:number,sizeLoaded:number)=>void;
}