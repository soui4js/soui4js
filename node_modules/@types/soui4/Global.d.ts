import { POINT } from "soui4/Basic";
import { IApplication } from "soui4/IApplication";
import { IEvtArgs } from "soui4/IEvt";
import { ILogMgr } from "soui4/ILogMgr";
import { IResProvider } from "soui4/IResProvider";
import { ISouiFac } from "soui4/ISouiFac";
import { ITranslatorMgr } from "soui4/ITranslator";
import { IWindow } from "soui4/IWindow"
import { HWND, LPARAM } from "soui4/Typedef";

/**
 * 打印日志
 * @param szLog 日志内容
 */
export function log(szLog:string):void;

/**
 * 打印日志
 * @param szLog 日志内容
 * @param level 日志级别
 */
export function log2(szLog:string,level:number):void;

/**
 * 获取IApplication对象
 */
export function GetApp():IApplication;

/**
 * 从pObj获取当前Captured Window
 * @param pObj 主界面上任意一个IWindow对象
 * @returns Captured Window
 */
export function GetCaptured(pObj:IWindow):IWindow;

/**
 * 从一个文件夹资源包初始化一个resProvider
 * @param resProvider 待初始化的resProvider
 * @param path 资源包路径
 */
export function InitFileResProvider(resProvider:IResProvider,path:string):boolean;

/**
 * 从PE文件初始化一个resProvider
 * @param resProvider 待初始化的resProvider
 * @param path PE资源包路径
 */
export function InitPEResProvider(resProvider:IResProvider,path:string):boolean;

/**
 * 创建ISouiFac对象
 */
export function CreateSouiFactory():ISouiFac;

/**
 * 创建zip资源包
 * @param app IApplication对象
 * @param path 资源包路径
 * @param password zip包密码
 */
export function CreateZipResProvider(app:IApplication,path:string,password:string):IResProvider;

/**
 * 创建7z资源包
 * @param app IApplication对象
 * @param path 资源包路径
 * @param password zip包密码
 */
export function Create7ZResProvider(app:IApplication,path:string,password:string):IResProvider;

/**
 * 创建多语言管理器对象
 */
export function CreateTranslatorMgr():ITranslatorMgr;

/**
 * 设置翻译语言
 * @param app IApplication对象
 * @param xmlId 语言文件的资源ID
 */
export function SetXmlTranslator(app:IApplication, xmlId:string):boolean;

/**
 * 创建日志管理器
 */
export function CreateLogMgr():ILogMgr;

/**
 * 将指定IWindow的指定事件对象连接到指定对象的事件处理方法
 * @param pObj IWindow窗口
 * @param evtId 事件类型
 * @param jsThis 处理事件的对象
 * @param jsFun 处理事件的方法
 */
export function SConnect(pObj:IWindow,evtId:number,jsThis:object,jsFun:(evt:IEvtArgs)=>boolean):boolean;

/**
 * 获取IWindow的item index属性
 * @param pObj IWindow对象
 * @remark 该方法在Adapter.getView方法里使用，getView中每一个item是一个IItemPanel对象，有item index属性
 */
export function SGetItemIndex(pObj:IWindow):LPARAM;

/**
 * 弹出一个msgbox窗口
 * @param hOwner msgbox的owner
 * @param pszText msg内容
 * @param pszTitle msg标题
 * @param uType 显示图标及按钮类型
 */
export function SMessageBox(hOwner:HWND,pszText:string,pszTitle:string,uType:number):number;

/**
 * 弹出文件夹选择窗口
 * @param path 初始路径
 */
export function PickFolder(path:string):string;

/**
 * 获取特定路径
 * @param type 特定路径类型，支持："video","music","document","appdata","desktop"
 */
export function GetSpecialPath(type:string):string;

/**
 * 调用系统API:ShellExecute
 * @param owner owner
 * @param pszOp operator 
 * @param pszFile filename
 * @param pszParam params
 * @param pszDir work dir
 * @param show show mode
 */
export function ShellExecute(owner:HWND,pszOp:string,pszFile:string,pszParam:string,pszDir:string,show:number):number;

/**
 * 使用使用指定参数来启动一个新的host
 * @param pszParam host启动参数，默认host支持两个参数，程序包路径及js文件名，如果没有指定js文件，则自动打开main.js
 */
export function Fork(pszParam:string):number;

/**
 * 判断当前进程是否有管理员权限
 */
export function IsRunAsAdmin():boolean;

/**
 * 使用管理员权限启动一个新的host
 * @param szFolder 资源包路径
 * @param szJs js文件名
 * @param waitEnd 等待程序退回再返回标志
 */
export function RunAsAdmin(szFolder:string, szJs:string,waitEnd:boolean):number;

/**
 * 创建路径
 * @param path 路径名
 * @param root 路径根
 */
export function MkPath(path:string, root:string):boolean;

/**
 * 返回当前宿主是不是x64版本
 */
export function IsX64():boolean;

/**
 * 返回当前宿主Os类型 1-windows, 2-linux, 4-macos, 0-unknown
 */
export function OsType():number;

/**
 * 通知系统设置改变，内部调用SendMessageTimeout(HWND_BROADCAST,WM_SETTINGCHANGE)
 * @param settingName 变化的类型，“Environment”代表环境变量
 * @param timeout 超时
 */
export function NotifySettingChange(settingName:string ,timeout:number ) :void;

