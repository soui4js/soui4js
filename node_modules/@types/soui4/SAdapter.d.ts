import { IWindow } from "soui4/IWindow";
import { IXmlNode } from "soui4/IXml";
import { HSTREEITEM } from "soui4/Typedef";

export class UIntArray{
    /**
     * get array size
     */
    Size():number;

    /**
     * get value at idx
     * @param idx index
     */
    GetAt(idx:number):number;

    /**
     * set value at index
     * @param idx index
     * @param data value
     */
    SetAt(idx:number,data:number):void;
}

export class SLvAdapter{
    constructor();
    /**
     * notify data set had changed
     */
    notifyDataSetChanged():void;

    /**
     * notify list to refresh ui
     */
    notifyDataSetInvalidated():void;

    /**
     * notify list to invalid specified item
     * @param idx item index
     */
    notifyItemDataChanged(idx:number):void;

    /**
     * callback this object
     */
    cbHandler:object;

    /**
     * callback function for getView
     * @param pos item index
     * @param pItem item object, IItemPanel
     * @param xmlTemplate xml template
     */
    onGetView:(pos:number,pItem:IWindow,xmlTemplate:IXmlNode)=>void;

    /**
     * callback function for getCount
     */
    onGetCount:()=>number;

    /**
     * callback function for InitByTemplate
     * @param xmlTemplate xml template
     */
    onInitByTemplate:(xmlTemplate:IXmlNode)=>void;

    /**
     * callback function for GetViewTypeCount
     */
    onGetViewTypeCount:()=>number;

    /**
     * callback function for GetItemViewType
     * @param pos item index
     */
    onGetItemViewType:(pos:number)=>number;
} 

export class SMcLvAdapter{
    constructor();

    /**
     * notify data set had changed
     */
    notifyDataSetChanged():void;

     /**
     * notify list to refresh ui
     */
    notifyDataSetInvalidated():void;

    /**
     * notify list to invalid specified item
     * @param idx item index
     */
    notifyItemDataChanged(idx:number):void;

    /**
     * callback this object
     */    
    cbHandler:object;

    /**
     * callback function for getView
     * @param pos item index
     * @param pItem item object, IItemPanel
     * @param xmlTemplate xml template
     */
    onGetView:(pos:number,pItem:IWindow,xmlTemplate:IXmlNode)=>void;
    
    /**
     * callback function for getCount
     */
    onGetCount:()=>number;

    /**
     * callback function for InitByTemplate
     * @param xmlTemplate xml template
     */
    onInitByTemplate:(xmlTemplate:IXmlNode)=>void;

    /**
     * callback function for GetViewTypeCount
     */
    onGetViewTypeCount:()=>number;

    /**
     * callback function for GetItemViewType
     * @param pos item index
     */
    onGetItemViewType:(pos:number)=>number;

    /**
     * callback function for sort
     * @param iCol column index
     * @param flags sort flags for every column
     */
    onSort:(iCol:number,flags:UIntArray)=>boolean;

    /**
     * callback for getColumnName
     * @param iCol column index
     */
    onGetColumnName:(iCol:number)=>string;

    /**
     * callback for isColumnVisible
     * @param iCol column index
     */
    onIsColumnVisible:(iCol:number)=>boolean;

}

export class STvAdapter{
    /**
     * notify data of branch changed
     * @param hBranch target branch 
     */
    notifyBranchChanged(hBranch:HSTREEITEM):void;

    /**
     * notify treeview to refresh a branch
     * @param hBranch target branch
     * @param invalidParent refresh parents
     * @param invalidChildren refresh children
     */
    notifyBranchInvalidated(hBranch:HSTREEITEM,invalidParent:boolean,invalidChildren:boolean):void;

    /**
     * notify expand state of a branch changed
     * @param hBranch target branch
     * @param expandOld old state
     * @param expandNew new state
     */
    notifyBranchExpandChanged(hBranch:HSTREEITEM,expandOld:boolean,expandNew:boolean):void;

    /**
     * insert item
     * @param key key value
     * @param parent parem item
     * @param insertAfter insert after
     */
    InsertItem(key:number,parent:HSTREEITEM,insertAfter:HSTREEITEM):HSTREEITEM;

    /**
     * get item data
     * @param hItem item
     */
    GetItemData(hItem:HSTREEITEM):number;

    /**
     * set item data
     * @param hItem item
     * @param data data
     */
    SetItemData(hItem:HSTREEITEM,data:number):void;

    /**
     * delete an item
     * @param hItem target item
     * @param notify notify dataset change flag
     */
    DeleteItem(hItem:HSTREEITEM,notify:boolean):void;

    /**
     * delete all items
     */
    DeleteAllItems():void;

    /**
     * set item expand state
     * @param hItem hitem
     * @param expanded expand state
     */
    SetItemExpanded(hItem:HSTREEITEM,expanded:boolean):void;

    /**
     * get item expand state
     * @param hItem item
     */
    IsItemExpanded(hItem:HSTREEITEM):boolean;


    ExpandItem(hItem:HSTREEITEM,mode:number):void;

    /**
     * get child item
     * @param hItem parent item
     * @param bFirst first child flag
     */
    GetChildItem(hItem:HSTREEITEM,bFirst:boolean):HSTREEITEM;

    /**
     * get parent of item
     * @param hItem 
     */
    GetParentItem(hItem:HSTREEITEM):HSTREEITEM;

    /**
     * get next sibling of item
     * @param hItem 
     */
    GetNextSibling(hItem:HSTREEITEM):HSTREEITEM;

    /**
     * get prev sibling of item
     * @param hItem 
     */
    GetPrevSibling(hItem:HSTREEITEM):HSTREEITEM;

    /**
     * callback this object
     */
    cbHandler:object;

    /**
     * callback function for getView
     * @param hItem current item
     * @param pItem item object (IItemPanel)
     * @param xmlTemplate xml template
     */
    onGetView:(hItem:HSTREEITEM,pItem:IWindow,xmlTemplate:IXmlNode)=>void;

    /**
     * callback function for InitByTemplate
     * @param xmlTemplate xml template
     */
    onInitByTemplate:(xmlTemplate:IXmlNode)=>void;

    /**
     * callback function for GetItemViewType
     * @param hItem item
     */
    onGetItemViewType:(hItem:HSTREEITEM)=>number;

    /**
     * callback function for GetViewTypeCount
     */
    onGetViewTypeCount:()=>number;

    /**
     * return whether item of treeview will take up whole width of treeview
     */
    onIsViewWidthMatchParent:()=>boolean;
}