import { IObjRef } from "soui4/IObjRef";
import { int } from "soui4/Typedef";

export class JsLogFileBuilder extends IObjRef{
    /**
     * callback this
     */
    cbHandler:object;

    /**
     * callback function
     */
    onBuildOutputFile:(logName:string,pid:number,fileIndex:number)=>string;
}

export class ILogMgr extends IObjRef{
    /**
     * config log mgr use a config file
     * @param configPath config file
     */
    config(configPath:string) :boolean;

    /**
     * config log mgr use a config string
     * @param configContent config string
     */
    configFromString(configContent:string) :boolean;

    //! Start Log Thread. This method can only be called once by one process.
    start() :boolean;

    //! Default the method will be calling at process exit auto.
    //! Default no need to call and no recommended.
    stop() :boolean;

    // pre-check the log filter. if filter out return false.
    prePushLog(level:int) :boolean;


    //! set logger's attribute
	isLoggerEnable():boolean;

    /**
     * switch log enable state
     * @param enable 
     */
    enableLogger(enable:boolean) :boolean;

    /**
     * set log name
     * @param name_u8 log name in utf8 string
     */
	setLoggerName(name_u8:string) :boolean;

    /**
     * set log path 
     * @param path_u8 log path in utf8
     */
    setLoggerPath(path_u8:string) :boolean;

    /**
     * set the lowest log level
     * @param nLevel 
     */
    setLoggerLevel(nLevel:int) :boolean;

    /**
     * switch write file line state
     * @param enable 
     */
    setLoggerFileLine(enable:boolean) :boolean;
    setLoggerDisplay(enable:boolean) :boolean;
    setLoggerOutFile(enable:boolean) :boolean;
    setLoggerLimitsize(limitsize:number) :boolean;
    setOutputFileBuilder(fileBuilder:JsLogFileBuilder):void;
}

