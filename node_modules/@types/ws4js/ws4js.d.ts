export class IObjRef {
    /**
     * 增加引用
     */
    AddRef():number;

    /**
     * 释放引用
     */
    Release():number;
}

export class IConnection extends IObjRef{
/**
 * return connection is valid or not
 */
isValid():boolean;

/**
     * sendText
     * @param str text buffer
     * @param len length, default is -1
     * @returns send msg id
     */
sendText(str:string,len:number):number;

/**
 * sendBinary
 * @param buf binary array buffer
 * @returns send msg id
 */
sendBinary(buf:ArrayBuffer):number;
}


/**
 * websocket module. 
 * can only used in ui thread.
 */
export class WebSocket extends IConnection{
    /**
     * constructor
     * @param protocol protocol
     * @param ca cert path
     * @param selfSigned allow self signed cert [optional], default is false
     * @param skipCheckHostCert skip check host cert [optional], default is false
     * @param allowExpired allow cert expired [optional], default is false
     */
    constructor(protocol:string, ca:string, selfSigned:boolean,skipCheckHostCert:boolean,allowExpired:boolean);

    /**
     * callback this object
     */    
    cbHandler:object;

    /**
     * callback for connect
     */
    onConnected:()=>void;

    /**
     * callback for conn err
     * @param errStr error string
     */
    onConnError:(errStr:string)=>void;

    /**
     * callback for disconnect
     */
    onClose:()=>void;

    /**
     * callback for msg sent finish
     * @param msgId message id
     */
    onDataSent:(msgId:number)=>void;

    /**
     * callback for recv text
     * @param str text
     */
    onText:(str:string)=>void;

    /**
     * callback for recv binary
     * @param buf buffer in ArrayBuffer
     */
    onBinary:(buf:ArrayBuffer)=>void;
}

export class ISvrConnection extends IConnection{
    /**
     * set id
     * @param id 
     */
    setId(id:number):void;

    /**
     * get id
     */
    getId():number;

    /**
     * set group id
     * @param id 
     */
    setGroupId(id:number):void;

    /**
     * get group id
     */
    getGroupId():number;

    /**
     * close this connection
     * @param reason string
     */
    close(reason:string):void;
}

export class WsServer{
    /**
     * start a websocket server
     * @param protocol protocol
     * @param port port
     * @param bSecure is using wss, defaut is false. [optional]
     * @param cert cert path [optional]
     * @param priv_key private key path [optional]
     * @returns number: error code. 0 is succeed
     */
    start(protocol:string, port:number, bSecure:boolean, cert:string, priv_key:string):number;

    /**
     * quit server
     */
    quit():void;

    /**
     * callback this object
     */    
    cbHandler:object;

    /**
     * callback for connection error
     * @param pConn ISvrConnection
     * @param errStr string
     */
    onConnError:(pConn: ISvrConnection, errStr:string)=>void;

    /**
     * callback for new connection estabilished
     * @param pConn ISvrConnection
     * @param uriPath uri path
     * @param uriArgs uri args
     * @returns boolean, return false to reject the conn
     */
    onConnected:(pConn: ISvrConnection,uriPath:string,uriArgs:string)=>boolean;

    /**
     * callback for conntion break
     * @param pConn ISvrConnection
     */
    onDisconnect:(pConn: ISvrConnection)=>void;

    /**
     * callback for recv text
     * @param pConn current connection
     * @param str text
     */
    onText:(pConn: ISvrConnection,str:string)=>void;

    /**
     * callback for recv binary
     * @param pConn current connection
     * @param buf buffer in ArrayBuffer
     */
    onBinary:(pConn: ISvrConnection,buf:ArrayBuffer)=>void;    
}